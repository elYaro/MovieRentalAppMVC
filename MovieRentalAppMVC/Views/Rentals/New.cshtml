
@{
    ViewBag.Title = "New Rental Form";
    //we don't need this line below with Layout because in _ViewStart.cshtml there is this line and will be used in every view
    //Layout = "~/Views/Shared/_Layout.cshtml";

}

@* Comment 1:
    before in CustomersForme we used :
    @using (Html.BeginForm("Save", "Customers")) Thise method will get url for this action and write behing the seens : <form action = "/Customers/Save/">. 
    But in this case we will not use the action attribute here
    Now we will not use it, because It will create the traditional HTML Form
    instead we will use row HTML like <form>

    In MVS there is also a helper method called 
    @Ajax.BeginForm()
    but this method is designed to call actions in mvc controller not api controllers
    And thats why we decide to use row html

    zencoding - method to quicly create markups
*@

<h2>New Rental Form</h2>


<form>
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container"> @*this additional div is to move input field in the next line in view*@
            <input id="customer" type="text" value="" class="form-control" />
        </div>
        
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            @*this additional div is to move input field in the next line in view*@
            <input id="movie" type="text" value="" class="form-control" />
        </div>
        
    </div>


    <div class="row">
        <div class="col-md-4 col-sm-4"> @*using another bootstram class to make the list dicplay not on entire width of the screen*@
            <ul id="movies" class="list-group"></ul> 
        </div>
    </div>
    
    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
    {
    <script>

        $(document).ready(function () {

            var viewModelOnClient = {
                movieIds: []
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 3,
                highlight: true

            }, {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }).on("typeahead:select", function (e, customer) {
                    viewModelOnClient.customerId = customer.id;
                });

            //Movies
            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                bold: true
            }, {
                    name: 'movies',
                    display: 'name',
                    source: movies
                }).on("typeahead:select", function (e, movie) {
                    $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                    $("#movie").typeahead("val", "");

                    viewModelOnClient.movieIds.push(movie.id);
                });



        });
    </script>

    }
